#!/usr/bin/env python3
# -*- coding: utf-8 -*-

try:

    import devpath
    from lampswitch.appdata import APPDEBUG
    APPDEBUG.append(True)

except:

    pass

import gi

gi.require_version('Gtk', '3.0')

try:

    gi.require_version('AyatanaAppIndicator3', '0.1')
    from gi.repository import AyatanaAppIndicator3 as AppIndicator

except ValueError:

    gi.require_version('AyatanaAppIndicator3', '0.1')
    from gi.repository import AppIndicator3 as AppIndicator

from gi.repository import Gtk, GdkPixbuf, GLib
import psutil
import os
import sys
import gettext
import subprocess
from lampswitch.appdata import *

try:
    m_oTranslation = gettext.translation(APPNAME)
except IOError:
    m_oTranslation = gettext.NullTranslations()

m_oTranslation.install()

class LampSwitch:

    def __init__(self):

        nCount = 0

        for oProc in psutil.process_iter():

            strName = oProc.name

            if not isinstance(strName, str):

               strName = oProc.name()

            if strName == 'python3' or strName == 'python':

                lstCmdline = oProc.cmdline

                if not isinstance(lstCmdline, list):

                    lstCmdline = oProc.cmdline()

                for strCmd in lstCmdline:

                    if strCmd.endswith(APPNAME):

                        nCount += 1

            elif strName.endswith(APPNAME):

                nCount += 1

            if nCount > 1:

                sys.exit(1)

        self.oIndicator = AppIndicator.Indicator.new(APPNAME, APPNAME + '-active', AppIndicator.IndicatorCategory.APPLICATION_STATUS)
        oBuilder = Gtk.Builder()
        oBuilder.set_translation_domain(APPNAME)
        oBuilder.add_from_file(self.getDataPath('/usr/share/' + APPNAME + '/' + APPNAME + '.glade'))
        oBuilder.connect_signals(self)

        for oObject in oBuilder.get_objects():

            try:

                self.__dict__[self.classVar(Gtk.Buildable.get_name(oObject))] = oObject

            except:

                pass

        self.oIndicator.set_attention_icon_full(APPNAME + '-attention', 'Web server running')
        self.oIndicator.set_status(AppIndicator.IndicatorStatus.ACTIVE)
        self.oIndicator.set_menu(self.oMenu)
        self.isRunning()

        try:

            GLib.MainLoop().run()

        except KeyboardInterrupt:

            sys.exit(0)

    def classVar(self, sID):

        return 'o' + sID[0:1].upper() + sID[1:]

    def getDataPath(self, sPath):

        try:

            sExecPath = os.path.split(APPEXECUTABLE)[0]
            sDataPath = os.getcwd().replace(sExecPath, '')
            sRelativePath = os.path.join(sDataPath, sPath.lstrip('/'))

            if os.path.exists(sRelativePath):

                return sRelativePath

        except:

            pass

        return sPath

    def isRunning(self):

        bRunningHttpd = subprocess.Popen('systemctl is-active httpd', stdout = subprocess.PIPE, shell = True).communicate()[0].decode().strip() == 'active'
        bRunningApache2 = subprocess.Popen('systemctl is-active apache2', stdout = subprocess.PIPE, shell = True).communicate()[0].decode().strip() == 'active'
        bRunning = (bRunningHttpd or bRunningApache2)
        self.oIndicator.set_status(AppIndicator.IndicatorStatus.ATTENTION if bRunning else AppIndicator.IndicatorStatus.ACTIVE)
        self.oMenuItemStop.set_sensitive(bRunning)
        self.oMenuItemStart.set_sensitive(not bRunning)
        self.oMenuItemRestart.set_sensitive(bRunning)

    def onMenuitemStopActivate(self, widget):

        subprocess.Popen('pkexec ' + self.getDataPath('/usr/share/lampswitch/services.sh') + ' stop', shell = True).wait()
        self.isRunning()

    def onMenuitemStartActivate(self, widget):

        subprocess.Popen('pkexec ' + self.getDataPath('/usr/share/lampswitch/services.sh') + ' start', shell = True).wait()
        self.isRunning()

    def onMenuitemRestartActivate(self, widget):

        subprocess.Popen('pkexec ' + self.getDataPath('/usr/share/lampswitch/services.sh') + ' restart', shell = True).wait()
        self.isRunning()

    def onMenuitemAboutActivate(self, widget, data = None):

        oAboutDialog = Gtk.AboutDialog()
        oAboutDialog.set_title(_('About ') + APPTITLE)
        oAboutDialog.set_license_type(Gtk.License.GPL_3_0)
        oAboutDialog.set_program_name(APPTITLE)
        oAboutDialog.set_copyright(APPAUTHOR + ' ' + (APPYEAR if APPYEAR[-2:] == APPVERSION[:2] else APPYEAR + '-20' + APPVERSION[:2]))
        oAboutDialog.set_comments(_(APPDESCRIPTION))
        oAboutDialog.set_authors([APPAUTHOR + ' &lt;' + APPMAIL + '&gt;'])
        oAboutDialog.set_translator_credits(_('translator-credits'))
        oAboutDialog.set_version(APPVERSION)
        oAboutDialog.set_website(APPURL)
        oAboutDialog.set_website_label(APPURL)
        oAboutDialog.set_logo(GdkPixbuf.Pixbuf().new_from_file(self.getDataPath('/usr/share/icons/hicolor/scalable/apps/' + APPNAME + '.svg')))
        oAboutDialog.run()
        oAboutDialog.destroy()

if __name__ == "__main__":

    LampSwitch()
