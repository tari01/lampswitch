#!/usr/bin/env python3
# -*- coding: utf-8 -*-

try:

    import devpath
    from lampswitch.appdata import APPDEBUG
    APPDEBUG.append(True)

except:

    pass

import gi

gi.require_version('Gtk', '3.0')
gi.require_version('AyatanaAppIndicator3', '0.1')

from gi.repository import AyatanaAppIndicator3
from gi.repository import Gtk, GdkPixbuf, GLib
import psutil
import os
import sys
import gettext
import subprocess
from lampswitch.appdata import *

try:
    m_oTranslation = gettext.translation(APPNAME)
except IOError:
    m_oTranslation = gettext.NullTranslations()

m_oTranslation.install()

class LampSwitch:

    def __init__(self):

        nCount = 0

        for oProc in psutil.process_iter():

            strName = oProc.name

            if not isinstance(strName, str):

               strName = oProc.name()

            if strName == 'python3' or strName == 'python':

                lstCmdline = oProc.cmdline

                if not isinstance(lstCmdline, list):

                    lstCmdline = oProc.cmdline()

                for strCmd in lstCmdline:

                    if strCmd.endswith(APPNAME):

                        nCount += 1

            elif strName.endswith(APPNAME):

                nCount += 1

            if nCount > 1:

                sys.exit(1)

        self.oMenu = Gtk.Menu.new()
        self.oMenuItemStart = Gtk.MenuItem.new_with_label(_('Start'))
        self.oMenuItemStart.connect('activate', self.onMenuitemStartActivate)
        self.oMenu.append(self.oMenuItemStart)
        self.oMenuItemStop = Gtk.MenuItem.new_with_label(_('Stop'))
        self.oMenuItemStop.connect('activate', self.onMenuitemStopActivate)
        self.oMenu.append(self.oMenuItemStop)
        self.oMenuItemRestart = Gtk.MenuItem.new_with_label(_('Restart'))
        self.oMenuItemRestart.connect('activate', self.onMenuitemRestartActivate)
        self.oMenu.append(self.oMenuItemRestart)
        self.oMenu.show_all()
        self.oIndicator = AyatanaAppIndicator3.Indicator.new(APPNAME, APPNAME + '-active', AyatanaAppIndicator3.IndicatorCategory.APPLICATION_STATUS)
        self.oIndicator.set_attention_icon_full(APPNAME + '-attention', 'Web server running')
        self.oIndicator.set_status(AyatanaAppIndicator3.IndicatorStatus.ACTIVE)
        self.oIndicator.set_menu(self.oMenu)
        self.isRunning()

        try:

            GLib.MainLoop().run()

        except KeyboardInterrupt:

            sys.exit(0)

    def isRunning(self):

        bRunningHttpd = subprocess.Popen('systemctl is-active httpd', stdout = subprocess.PIPE, shell = True).communicate()[0].decode().strip() == 'active'
        bRunningApache2 = subprocess.Popen('systemctl is-active apache2', stdout = subprocess.PIPE, shell = True).communicate()[0].decode().strip() == 'active'
        bRunningNginx = subprocess.Popen('systemctl is-active nginx', stdout = subprocess.PIPE, shell = True).communicate()[0].decode().strip() == 'active'
        bRunningPhp = subprocess.Popen('systemctl is-active php-fpm', stdout = subprocess.PIPE, shell = True).communicate()[0].decode().strip() == 'active'
        bRunning = any([bRunningHttpd, bRunningApache2, bRunningNginx, bRunningPhp])
        self.oIndicator.set_status(AyatanaAppIndicator3.IndicatorStatus.ATTENTION if bRunning else AyatanaAppIndicator3.IndicatorStatus.ACTIVE)
        self.oMenuItemStop.set_sensitive(bRunning)
        self.oMenuItemStart.set_sensitive(not bRunning)
        self.oMenuItemRestart.set_sensitive(bRunning)

    def onMenuitemStopActivate(self, widget):

        subprocess.Popen('pkexec /usr/share/lampswitch/services.sh stop', shell = True).wait()
        self.isRunning()

    def onMenuitemStartActivate(self, widget):

        subprocess.Popen('pkexec /usr/share/lampswitch/services.sh start', shell = True).wait()
        self.isRunning()

    def onMenuitemRestartActivate(self, widget):

        subprocess.Popen('pkexec /usr/share/lampswitch/services.sh restart', shell = True).wait()
        self.isRunning()

if __name__ == "__main__":

    LampSwitch()
